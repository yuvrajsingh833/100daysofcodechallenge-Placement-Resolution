//Day-3(Module 23- Linked List)-24/07/2024

//Creating a Linked List

/* public class LinkedList {
    public static class Node{ //class
        int data;
        Node next;

        public Node(int data){//constructor
            this.data=data;
            this.next=null;
        }
    }

    public static Node head;
    public static Node tail;
    public static void main(String[] args) {
        LinkedList ll=new LinkedList();
        ll.head=new Node(1);
        ll.head.next=new Node(2);
    }
}
 */

 //Adding first node--T.C-O(1), adding Last node--T.C-O(1), and printing the linked list-T.C-O(n), Add Node-T.C.O(n), Size of a LL.

public class LinkedList {
    public class Node{
        int data;
        Node next;

        public Node(int data){
            this.data=data;
            this.next=null;
        }
    
    }
    public static Node head;
    public static Node tail;
    public static int  size;

    public void addFirst(int data){
         //step-1 create new Node
         Node newNode=new Node(data);
         size++;
         if(head==null){
            head=tail=newNode;
            return;
         }
        //step-2 NewNode next=head;
        newNode.next=head; //link
        //step-3 head=newNode;
        head=newNode;
    }

    public void addLast(int data){
        Node newNode=new Node(data);
        size++;
        if(head==null){
            head=tail=newNode;
            return;
        }
        tail.next=newNode;
        tail=newNode;
        
    }

    public void printLL(){
        if(head==null){
            System.out.println("LL is empty");
        }
        Node temp=head;
        while(temp!=null){
        System.out.print(temp.data+"-->");
        temp=temp.next;
        }
        System.out.println("");
        
    }
    
    public void add(int idx,int data){
        if(idx==0){
            addFirst(data);
            return;
        }
        Node newNode=new Node(data);
        size++;
        Node temp=head;
    
        //finding index
        int i=0;
        while(i<idx-1){
         temp=temp.next;
         i++;   
        }

        newNode.next=temp.next;
        temp.next=newNode;
        

    }

    public static void main(String[] args) {
        LinkedList ll =new LinkedList();
        ll.printLL();
        ll.addFirst(2);
        ll.printLL();
        ll.addFirst(4);
        ll.printLL();
        ll.addLast(6);
        ll.printLL();
        ll.addLast(8);
        ll.printLL();
        ll.add(2, 10);
        ll.printLL();

        System.out.println(ll.size);
    }

}
